import java.util.Random;

public class QuickSortVariations {

    public void QuickSort(int[] array, int left, int right, String pivotType) {
        switch (pivotType) {
            case "first":
                QuickSortFirstPivot(array, left, right);
                break;
            case "last":
                QuickSortLastPivot(array, left, right);
                break;
            case "random":
                QuickSortRandomPivot(array, left, right);
                break;
            case "medianOfThree":
                QuickSortMedianOfThree(array, left, right);
                break;
            default:
                throw new IllegalArgumentException("Tipo de pivô inválido");
        }
    }

    private void QuickSortFirstPivot(int[] array, int left, int right) {
        if (left < right) {
            int pivotIndex = partitionFirstPivot(array, left, right);
            QuickSortFirstPivot(array, left, pivotIndex - 1);
            QuickSortFirstPivot(array, pivotIndex + 1, right);
        }
    }

    private void QuickSortLastPivot(int[] array, int left, int right) {
        if (left < right) {
            swap(array, left, right);
            int pivotIndex = partitionFirstPivot(array, left, right);
            QuickSortLastPivot(array, left, pivotIndex - 1);
            QuickSortLastPivot(array, pivotIndex + 1, right);
        }
    }

    private void QuickSortRandomPivot(int[] array, int left, int right) {
        if (left < right) {
            Random rand = new Random();
            int randomIndex = left + rand.nextInt(right - left + 1);
            swap(array, left, randomIndex);
            int pivotIndex = partitionFirstPivot(array, left, right);
            QuickSortRandomPivot(array, left, pivotIndex - 1);
            QuickSortRandomPivot(array, pivotIndex + 1, right);
        }
    }

    private void QuickSortMedianOfThree(int[] array, int left, int right) {
        if (left < right) {
            int pivotIndex = partitionMedianOfThree(array, left, right);
            QuickSortMedianOfThree(array, left, pivotIndex - 1);
            QuickSortMedianOfThree(array, pivotIndex + 1, right);
        }
    }

    private int partitionFirstPivot(int[] array, int left, int right) {
        int pivot = array[left];
        int i = left + 1;

        for (int j = left + 1; j <= right; j++) {
            if (array[j] < pivot) {
                swap(array, i, j);
                i++;
            }
        }
        swap(array, left, i - 1);
        return i - 1;
    }

    private int partitionMedianOfThree(int[] array, int left, int right) {
        int mid = left + (right - left) / 2;
        int medianIndex = medianOfThree(array, left, mid, right);
        swap(array, left, medianIndex);
        return partitionFirstPivot(array, left, right);
    }

    private int medianOfThree(int[] array, int left, int mid, int right) {
        int a = array[left], b = array[mid], c = array[right];
        if ((a > b) ^ (a > c)) return left;
        else if ((b < a) ^ (b < c)) return mid;
        else return right;
    }

    private void swap(int[] array, int i, int j) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }

    public static void main(String[] args) {
        QuickSortVariations sorter = new QuickSortVariations();

        int[] array = {5, 2, 9, 1, 5, 6};
        System.out.println("Array original:");
        printArray(array);

        sorter.QuickSort(array, 0, array.length - 1, "first");
        System.out.println("Ordenado com o primeiro elemento como pivô:");
        printArray(array);

        sorter.QuickSort(array, 0, array.length - 1, "last");
        System.out.println("Ordenado com o último elemento como pivô:");
        printArray(array);

        sorter.QuickSort(array, 0, array.length - 1, "random");
        System.out.println("Ordenado com o pivô aleatório:");
        printArray(array);

        sorter.QuickSort(array, 0, array.length - 1, "medianOfThree");
        System.out.println("Ordenado com a mediana de três como pivô:");
        printArray(array);
    }

    private static void printArray(int[] array) {
        for (int i : array) {
            System.out.print(i + " ");
        }
        System.out.println();
    }
}
